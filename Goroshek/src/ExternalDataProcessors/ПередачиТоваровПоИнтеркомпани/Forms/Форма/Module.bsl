
&НаКлиенте
Процедура АнализОстатков(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		Оповоещение 	= Новый ОписаниеОповещения("АнализОстатков_Оповещение1", ЭтаФорма);
		ТекстВопроса	= "Перед заполнением табличная часть 'Товары' будет очищена. Продолжить?";
		Кнопки			= Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да);
		Кнопки.Добавить(КодВозвратаДиалога.Нет);
		ПоказатьВопрос(Оповоещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет);
	Иначе
		АнализОтрицательныхОстатков();		
		//ПоказатьПредупреждение(, "Анализ завершен!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АнализОстатков_Оповещение1(ОтветДиалога, ДополнительныеПараметры) Экспорт
	
	Если КодВозвратаДиалога.Да <> ОтветДиалога Тогда
		Возврат;
	КонецЕсли;	
	
	Товары.Очистить();
	
	АнализОтрицательныхОстатков();
	//ПоказатьПредупреждение(, "Анализ завершен!");
КонецПроцедуры	

&НаСервере
Процедура АнализОтрицательныхОстатков()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	                      |	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	                      |ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	                      |ИЗ
	                      |	РегистрСведений.НоменклатураСегмента КАК Сегменты
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	                      |		ПО Сегменты.Номенклатура = Аналитика.Номенклатура
	                      |			И Сегменты.Характеристика = Аналитика.Характеристика
	                      |{ГДЕ
	                      |	Сегменты.Сегмент.* КАК СегментНоменклатуры,
	                      |	Сегменты.Номенклатура.* КАК Номенклатура,
	                      |	Сегменты.Характеристика.* КАК Характеристика}
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	АналитикаУчетаНоменклатуры,
	                      |	ИспользуетсяОтборПоСегментуНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ТоварыОрганизаций.Организация КАК Организация,
	                      |	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	                      |	ТоварыОрганизаций.Период КАК Период
	                      |ПОМЕСТИТЬ ВтТаблицаОтрицательныхОстатков
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(, , Месяц, , {(АналитикаУчетаНоменклатуры В
	                      |			    (ВЫБРАТЬ
	                      |			        ОтборПоСегментуНоменклатуры.АналитикаУчетаНоменклатуры
	                      |			    ИЗ
	                      |			        ОтборПоСегментуНоменклатуры
	                      |			    ГДЕ
	                      |			        ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2}) КАК ТоварыОрганизаций
	                      |ГДЕ
	                      |	ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	                      |	И ТоварыОрганизаций.КоличествоНачальныйОстаток <> ТоварыОрганизаций.КоличествоКонечныйОстаток
	                      |	И &ЕстьРазвернутоеСальдо
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Организация,
	                      |	АналитикаУчетаНоменклатуры,
	                      |	Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТоварыОрганизаций.Организация КАК Организация,
	                      |	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	                      |	ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	                      |	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	                      |	ТоварыОрганизаций.Период КАК Период,
	                      |	ИСТИНА КАК ЕстьРазвернутоеСальдо
	                      |ПОМЕСТИТЬ ВтТаблицаРазвернутоеСальдо
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(, , Месяц, , {(АналитикаУчетаНоменклатуры В
	                      |			    (ВЫБРАТЬ
	                      |			        ОтборПоСегментуНоменклатуры.АналитикаУчетаНоменклатуры
	                      |			    ИЗ
	                      |			        ОтборПоСегментуНоменклатуры
	                      |			    ГДЕ
	                      |			        ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2}) КАК ТоварыОрганизаций
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаОтрицательныхОстатков КАК ТаблицаОтрицательныхОстатков
	                      |		ПО ТоварыОрганизаций.Организация = ТаблицаОтрицательныхОстатков.Организация
	                      |			И ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаОтрицательныхОстатков.АналитикаУчетаНоменклатуры
	                      |			И ТоварыОрганизаций.Период = ТаблицаОтрицательныхОстатков.Период
	                      |ГДЕ
	                      |	ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	                      |	И ТоварыОрганизаций.КоличествоНачальныйОстаток <> ТоварыОрганизаций.КоличествоКонечныйОстаток
	                      |	И ТаблицаОтрицательныхОстатков.Период ЕСТЬ NULL
	                      |	И &ЕстьРазвернутоеСальдо
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Организация,
	                      |	АналитикаУчетаНоменклатуры,
	                      |	ВидЗапасов,
	                      |	НомерГТД,
	                      |	Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТаблицаРазвернутоеСальдо.Организация КАК Организация,
	                      |	ТаблицаРазвернутоеСальдо.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	                      |	ТаблицаРазвернутоеСальдо.Период КАК Период
	                      |ПОМЕСТИТЬ ВтТаблицаОтборНоменклатурыПоПериодам
	                      |ИЗ
	                      |	ВтТаблицаРазвернутоеСальдо КАК ТаблицаРазвернутоеСальдо
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТоварыОрганизаций.Организация КАК Организация,
	                      |	Аналитика.Номенклатура КАК Номенклатура,
	                      |	Аналитика.Характеристика КАК Характеристика,
	                      |	Аналитика.Серия КАК Серия,
	                      |	Аналитика.МестоХранения КАК Склад,
	                      |	ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	                      |	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	                      |	ТоварыОрганизаций.ПериодМесяц КАК Период,
	                      |	ТоварыОрганизаций.ПериодСекунда КАК ПериодСекунда,
	                      |	ВЫБОР
	                      |		КОГДА ТоварыОрганизаций.Регистратор = НЕОПРЕДЕЛЕНО
	                      |			ТОГДА NULL
	                      |		ИНАЧЕ ТоварыОрганизаций.Регистратор
	                      |	КОНЕЦ КАК Регистратор,
	                      |	ТоварыОрганизаций.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	                      |	ТоварыОрганизаций.КоличествоПриход КАК КоличествоПриход,
	                      |	ТоварыОрганизаций.КоличествоРасход КАК КоличествоРасход,
	                      |	ТоварыОрганизаций.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	                      |	ЕСТЬNULL(ТаблицаРазвернутоеСальдо.ЕстьРазвернутоеСальдо, ЛОЖЬ) КАК ЕстьРазвернутоеСальдо
	                      |ПОМЕСТИТЬ Результат1
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
	                      |			,
	                      |			,
	                      |			Авто,
	                      |			Движения,
	                      |			&ЕстьРазвернутоеСальдо
	                      |				И (Организация, АналитикаУчетаНоменклатуры) В
	                      |					(ВЫБРАТЬ
	                      |						ТаблицаРазвернутоеСальдо.Организация,
	                      |						ТаблицаРазвернутоеСальдо.АналитикаУчетаНоменклатуры
	                      |					ИЗ
	                      |						ВтТаблицаРазвернутоеСальдо КАК ТаблицаРазвернутоеСальдо)
	                      |				И ВЫБОР
	                      |					КОГДА &УчитыватьТоварыИСМП
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ НЕ АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар
	                      |				КОНЕЦ) КАК ТоварыОрганизаций
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	                      |		ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаОтборНоменклатурыПоПериодам КАК ТаблицаОтборНоменклатурыПоПериодам
	                      |		ПО ТоварыОрганизаций.Организация = ТаблицаОтборНоменклатурыПоПериодам.Организация
	                      |			И ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаОтборНоменклатурыПоПериодам.АналитикаУчетаНоменклатуры
	                      |			И ТоварыОрганизаций.ПериодМесяц = ТаблицаОтборНоменклатурыПоПериодам.Период
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаРазвернутоеСальдо КАК ТаблицаРазвернутоеСальдо
	                      |		ПО ТоварыОрганизаций.Организация = ТаблицаРазвернутоеСальдо.Организация
	                      |			И ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаРазвернутоеСальдо.АналитикаУчетаНоменклатуры
	                      |			И ТоварыОрганизаций.ВидЗапасов = ТаблицаРазвернутоеСальдо.ВидЗапасов
	                      |			И ТоварыОрганизаций.НомерГТД = ТаблицаРазвернутоеСальдо.НомерГТД
	                      |			И ТоварыОрганизаций.ПериодМесяц = ТаблицаРазвернутоеСальдо.Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ВтТаблицаОтрицательныхОстатков
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |УНИЧТОЖИТЬ ОтборПоСегментуНоменклатуры");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуНоменклатуры", Ложь);
	Запрос.УстановитьПараметр("ЕстьРазвернутоеСальдо", Истина);	
	Запрос.УстановитьПараметр("НачПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьТоварыИСМП", УчитыватьТоварыИСМП);
	Запрос.Выполнить();
	
	//	ЗапросТест = Новый Запрос("Выбрать * Из Результат1");
	//	ЗапросТест.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//	Результат1 = ЗапросТест.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	Аналитика.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	                      |	ИСТИНА КАК ИспользуетсяОтборПоСегментуНоменклатуры
	                      |ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	                      |ИЗ
	                      |	РегистрСведений.НоменклатураСегмента КАК Сегменты
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	                      |		ПО Сегменты.Номенклатура = Аналитика.Номенклатура
	                      |			И Сегменты.Характеристика = Аналитика.Характеристика
	                      |{ГДЕ
	                      |	Сегменты.Сегмент.* КАК СегментНоменклатуры,
	                      |	Сегменты.Номенклатура.* КАК Номенклатура,
	                      |	Сегменты.Характеристика.* КАК Характеристика}
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	АналитикаУчетаНоменклатуры,
	                      |	ИспользуетсяОтборПоСегментуНоменклатуры
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ТоварыОрганизаций.Организация КАК Организация,
	                      |	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	                      |	ТоварыОрганизаций.Период КАК Период,
	                      |	ИСТИНА КАК ЕстьОтрицательныеОстатки
	                      |ПОМЕСТИТЬ ВтТаблицаОтрицательныхОстатков
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(, , Месяц, , {(АналитикаУчетаНоменклатуры В
	                      |			    (ВЫБРАТЬ
	                      |			        ОтборПоСегментуНоменклатуры.АналитикаУчетаНоменклатуры
	                      |			    ИЗ
	                      |			        ОтборПоСегментуНоменклатуры
	                      |			    ГДЕ
	                      |			        ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2}) КАК ТоварыОрганизаций
	                      |ГДЕ
	                      |	ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	                      |	И ТоварыОрганизаций.КоличествоНачальныйОстаток <> ТоварыОрганизаций.КоличествоКонечныйОстаток
	                      |	И &ЕстьОтрицательныеОстатки
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	Организация,
	                      |	АналитикаУчетаНоменклатуры,
	                      |	Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	                      |	ТоварыОрганизаций.Период КАК Период,
	                      |	ИСТИНА КАК ЕстьОтсутствующиеТовары
	                      |ПОМЕСТИТЬ ВтТаблицаОтсутствующиеТовары
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(, , Месяц, , {(АналитикаУчетаНоменклатуры В
	                      |			    (ВЫБРАТЬ
	                      |			        ОтборПоСегментуНоменклатуры.АналитикаУчетаНоменклатуры
	                      |			    ИЗ
	                      |			        ОтборПоСегментуНоменклатуры
	                      |			    ГДЕ
	                      |			        ОтборПоСегментуНоменклатуры.ИспользуетсяОтборПоСегментуНоменклатуры = &ИспользуетсяОтборПоСегментуНоменклатуры)) КАК Поле2}) КАК ТоварыОрганизаций
	                      |ГДЕ
	                      |	ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	                      |	И ТоварыОрганизаций.КоличествоНачальныйОстаток <> ТоварыОрганизаций.КоличествоКонечныйОстаток
	                      |	И &ЕстьОтрицательныеОстатки
	                      |
	                      |ИНДЕКСИРОВАТЬ ПО
	                      |	АналитикаУчетаНоменклатуры,
	                      |	Период
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ТоварыОрганизаций.Организация КАК Организация,
	                      |	Аналитика.Номенклатура КАК Номенклатура,
	                      |	Аналитика.Характеристика КАК Характеристика,
	                      |	Аналитика.Серия КАК Серия,
	                      |	Аналитика.МестоХранения КАК Склад,
	                      |	ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	                      |	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	                      |	ТоварыОрганизаций.ПериодМесяц КАК Период,
	                      |	ТоварыОрганизаций.ПериодСекунда КАК ПериодСекунда,
	                      |	ВЫБОР
	                      |		КОГДА ТоварыОрганизаций.Регистратор = НЕОПРЕДЕЛЕНО
	                      |			ТОГДА NULL
	                      |		ИНАЧЕ ТоварыОрганизаций.Регистратор
	                      |	КОНЕЦ КАК Регистратор,
	                      |	ТоварыОрганизаций.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	                      |	ТоварыОрганизаций.КоличествоПриход КАК КоличествоПриход,
	                      |	ТоварыОрганизаций.КоличествоРасход КАК КоличествоРасход,
	                      |	ТоварыОрганизаций.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	                      |	ВЫБОР
	                      |		КОГДА ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	                      |			ТОГДА -ТоварыОрганизаций.КоличествоКонечныйОстаток
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК КоличествоКОформлению,
	                      |	ВЫБОР
	                      |		КОГДА ТоварыОрганизаций.КоличествоКонечныйОстаток > 0
	                      |			ТОГДА ТоварыОрганизаций.КоличествоКонечныйОстаток
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК КоличествоВНаличии,
	                      |	ЕСТЬNULL(ТаблицаОтрицательныхОстатков.ЕстьОтрицательныеОстатки, ЛОЖЬ) КАК ЕстьОтрицательныеОстатки,
	                      |	ЕСТЬNULL(ТаблицаОтсутствующиеТовары.ЕстьОтсутствующиеТовары, ЛОЖЬ) КАК ЕстьОтсутствующиеТовары
	                      |ПОМЕСТИТЬ Результат2
	                      |ИЗ
	                      |	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
	                      |			,
	                      |			,
	                      |			Авто,
	                      |			,
	                      |			&ЕстьОтрицательныеОстатки
	                      |				И АналитикаУчетаНоменклатуры В
	                      |					(ВЫБРАТЬ
	                      |						ТаблицаОтрицательныхОстатков.АналитикаУчетаНоменклатуры
	                      |					ИЗ
	                      |						ВтТаблицаОтрицательныхОстатков КАК ТаблицаОтрицательныхОстатков)
	                      |				И ВЫБОР
	                      |					КОГДА &УчитыватьТоварыИСМП
	                      |						ТОГДА ИСТИНА
	                      |					ИНАЧЕ НЕ АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар
	                      |				КОНЕЦ) КАК ТоварыОрганизаций
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	                      |		ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаОтрицательныхОстатков КАК ТаблицаОтрицательныхОстатков
	                      |		ПО ТоварыОрганизаций.Организация = ТаблицаОтрицательныхОстатков.Организация
	                      |			И ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаОтрицательныхОстатков.АналитикаУчетаНоменклатуры
	                      |			И ТоварыОрганизаций.ПериодМесяц = ТаблицаОтрицательныхОстатков.Период
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаОтсутствующиеТовары КАК ТаблицаОтсутствующиеТовары
	                      |		ПО ТоварыОрганизаций.АналитикаУчетаНоменклатуры = ТаблицаОтсутствующиеТовары.АналитикаУчетаНоменклатуры
	                      |			И ТоварыОрганизаций.ПериодМесяц = ТаблицаОтсутствующиеТовары.Период
	                      |ГДЕ
	                      |	(&ТолькоОтрицательныеОстатки
	                      |				И ТоварыОрганизаций.КоличествоКонечныйОстаток < 0
	                      |			ИЛИ НЕ &ТолькоОтрицательныеОстатки)");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуНоменклатуры", Ложь);
	Запрос.УстановитьПараметр("ЕстьОтрицательныеОстатки", Истина);
	Запрос.УстановитьПараметр("ТолькоОтрицательныеОстатки", Истина);
	Запрос.УстановитьПараметр("НачПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("УчитыватьТоварыИСМП", УчитыватьТоварыИСМП);
	Запрос.Выполнить();
	
	//ЗапросТест = Новый Запрос("Выбрать * Из ОтрицательныеОстатки");
	//ЗапросТест.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Результат1 = ЗапросТест.Выполнить().Выгрузить();
	//
	//ЗапросТест = Новый Запрос("Выбрать * Из Результат2");
	//ЗапросТест.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Результат2 = ЗапросТест.Выполнить().Выгрузить();
	
	//ЗапросТест = Новый Запрос("Выбрать * Из ВтТаблицаРазвернутоеСальдо");
	//ЗапросТест.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Результат3 = ЗапросТест.Выполнить().Выгрузить();
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Остатки.Организация КАК Организация,
	                      |	Остатки.Номенклатура КАК Номенклатура,
	                      |	Остатки.Характеристика КАК Характеристика,
	                      |	Остатки.Серия КАК Серия,
	                      |	Остатки.Склад КАК Склад,
	                      |	Остатки.ВидЗапасов КАК ВидЗапасов,
	                      |	Остатки.НомерГТД КАК НомерГТД,
	                      |	Остатки.Период КАК Период,
	                      |	Остатки.ПериодСекунда КАК ПериодСекунда,
	                      |	Остатки.Регистратор КАК Регистратор,
	                      |	Остатки.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	                      |	Остатки.КоличествоПриход КАК КоличествоПриход,
	                      |	Остатки.КоличествоРасход КАК КоличествоРасход,
	                      |	Остатки.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	                      |	Остатки.ЕстьРазвернутоеСальдо КАК ЕстьРазвернутоеСальдо,
	                      |	Остатки.КоличествоКОформлению КАК КоличествоКОформлению,
	                      |	Остатки.КоличествоВНаличии КАК КоличествоВНаличии,
	                      |	Остатки.ЕстьОтрицательныеОстатки КАК ЕстьОтрицательныеОстатки,
	                      |	Остатки.ЕстьОтсутствующиеТовары КАК ЕстьОтсутствующиеТовары
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		РазвернутоеСальдо.Организация КАК Организация,
	                      |		РазвернутоеСальдо.Номенклатура КАК Номенклатура,
	                      |		РазвернутоеСальдо.Характеристика КАК Характеристика,
	                      |		РазвернутоеСальдо.Серия КАК Серия,
	                      |		РазвернутоеСальдо.Склад КАК Склад,
	                      |		РазвернутоеСальдо.ВидЗапасов КАК ВидЗапасов,
	                      |		РазвернутоеСальдо.НомерГТД КАК НомерГТД,
	                      |		РазвернутоеСальдо.Период КАК Период,
	                      |		РазвернутоеСальдо.ПериодСекунда КАК ПериодСекунда,
	                      |		РазвернутоеСальдо.Регистратор КАК Регистратор,
	                      |		РазвернутоеСальдо.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	                      |		РазвернутоеСальдо.КоличествоПриход КАК КоличествоПриход,
	                      |		РазвернутоеСальдо.КоличествоРасход КАК КоличествоРасход,
	                      |		РазвернутоеСальдо.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток,
	                      |		РазвернутоеСальдо.ЕстьРазвернутоеСальдо КАК ЕстьРазвернутоеСальдо,
	                      |		0 КАК КоличествоКОформлению,
	                      |		0 КАК КоличествоВНаличии,
	                      |		ЛОЖЬ КАК ЕстьОтрицательныеОстатки,
	                      |		ЛОЖЬ КАК ЕстьОтсутствующиеТовары
	                      |	ИЗ
	                      |		Результат1 КАК РазвернутоеСальдо
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		ОтрицательныеОстатки.Организация,
	                      |		ОтрицательныеОстатки.Номенклатура,
	                      |		ОтрицательныеОстатки.Характеристика,
	                      |		ОтрицательныеОстатки.Серия,
	                      |		ОтрицательныеОстатки.Склад,
	                      |		ОтрицательныеОстатки.ВидЗапасов,
	                      |		ОтрицательныеОстатки.НомерГТД,
	                      |		ОтрицательныеОстатки.Период,
	                      |		ОтрицательныеОстатки.ПериодСекунда,
	                      |		ОтрицательныеОстатки.Регистратор,
	                      |		ОтрицательныеОстатки.КоличествоНачальныйОстаток,
	                      |		ОтрицательныеОстатки.КоличествоПриход,
	                      |		ОтрицательныеОстатки.КоличествоРасход,
	                      |		ОтрицательныеОстатки.КоличествоКонечныйОстаток,
	                      |		ЛОЖЬ,
	                      |		ОтрицательныеОстатки.КоличествоКОформлению,
	                      |		ОтрицательныеОстатки.КоличествоВНаличии,
	                      |		ОтрицательныеОстатки.ЕстьОтрицательныеОстатки,
	                      |		ОтрицательныеОстатки.ЕстьОтсутствующиеТовары
	                      |	ИЗ
	                      |		Результат2 КАК ОтрицательныеОстатки) КАК Остатки
	                      |ГДЕ
	                      |	Остатки.Период МЕЖДУ &НачПериода И &КонПериода
	                      |	И Остатки.ЕстьОтрицательныеОстатки
	                      |	И Остатки.КоличествоРасход > 0
	                      |	И ВЫБОР
	                      |			КОГДА &ИспользоватьОтбор
	                      |				ТОГДА Остатки.Номенклатура В ИЕРАРХИИ (&Номенклатура)
	                      |			ИНАЧЕ ИСТИНА
	                      |		КОНЕЦ
	                      |	И ВЫБОР
	                      |			КОГДА &Производитель = ЗНАЧЕНИЕ(Справочник.Производители.ПустаяСсылка)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ &Производитель = ВЫРАЗИТЬ(Остатки.Номенклатура КАК Справочник.Номенклатура).Производитель
	                      |		КОНЕЦ
	                      |	И ВЫБОР
	                      |			КОГДА &Документ = ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ Остатки.Регистратор = &Документ
	                      |		КОНЕЦ
	                      |	И ВЫБОР
	                      |			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ Остатки.Организация = &Организация
	                      |		КОНЕЦ
	                      |	И НЕ Остатки.Регистратор ССЫЛКА Документ.КорректировкаНазначенияТоваров");
	
	МассивОтбора = НоменклатураОтбор.ВыгрузитьЗначения();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Номенклатура", МассивОтбора);
	Запрос.УстановитьПараметр("ИспользоватьОтбор", Не МассивОтбора.Количество() = 0);
	Запрос.УстановитьПараметр("Производитель", ПроизводительОтбор);
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	Запрос.УстановитьПараметр("Документ", ДокументПродажиОтбор);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Регистратор = Null Тогда
			Продолжить;
		КонецЕсли;	
		
		НовСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
		
		Если Выборка.КоличествоНачальныйОстаток > 0 Тогда
			НовСтрока.КоличествоКОформлению = Выборка.КоличествоРасход - Выборка.КоличествоНачальныйОстаток;
		Иначе
			НовСтрока.КоличествоКОформлению = Выборка.КоличествоРасход;
		КонецЕсли;	
		//НовСтрока.КоличествоКОформлению = Выборка.КоличествоКонечныйОстаток * -1; 
		//Если Выборка.КоличествоНачальныйОстаток > 0 Тогда
		//	НовСтрока.КоличествоКОформлению = НовСтрока.КоличествоКОформлению - Выборка.КоличествоНачальныйОстаток;
		//Иначе
		//	НовСтрока.КоличествоКОформлению = НовСтрока.КоличествоКОформлению + Выборка.КоличествоНачальныйОстаток;
		//КонецЕсли;
		
		НовСтрока.Количество = НовСтрока.КоличествоКОформлению;
		//НовСтрока.КоличествоКОформлению = Выборка.КоличествоРасход;
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодобратьОстатки(Команда)
	
	Если Товары.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Нет товаров для подбора");
		Возврат;
	КонецЕсли;
	
	Если Схема.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не ни одной схемы подбора остатков. Дальнейший подбор не возможен");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтавкаНДС20) Тогда
		ПоказатьПредупреждение(, "Не указана ставка НДС по умолчанию");
		Возврат;
	КонецЕсли;	
	
	Если Результат.Количество() > 0 Тогда
		Оповоещение 	= Новый ОписаниеОповещения("ПодобратьОстатки_Оповещение", ЭтаФорма);
		ТекстВопроса	= "Перед заполнением табличная часть 'Результат' будет очищена. Продолжить?";
		Кнопки			= Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да);
		Кнопки.Добавить(КодВозвратаДиалога.Нет);
		ПоказатьВопрос(Оповоещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет);
	Иначе
		ПодборОстатковОрганизации();
		ПоказатьПредупреждение(, "Подбор завершен!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьОстатки_Оповещение(ОтветДиалога, ДополнительныеПараметры) Экспорт
	
	Если КодВозвратаДиалога.Да <> ОтветДиалога Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Очистить();
	
	ПодборОстатковОрганизации();
	ПоказатьПредупреждение(, "Подбор завершен!");
КонецПроцедуры	

&НаСервере
Процедура ПодборОстатковОрганизации()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(Товары.ПериодСекунда, ДЕНЬ) КАК Период,
	|	Товары.НомерГТД КАК НомерГТД,
	|	Товары.КоличествоКОформлению КАК КоличествоКОформлению,
	|	Товары.ЕстьОтсутствующиеТовары КАК ЕстьОтсутствующиеТовары,
	|	Товары.Склад КАК Склад
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|//ГДЕ
	|//	НЕ Товары.ЕстьОтсутствующиеТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Организация КАК Организация,
	|	Товары.НомерГТД КАК НомерГТД,
	|	СУММА(Товары.КоличествоКОформлению) КАК КоличествоКОформлению,
	|	Товары.ЕстьОтсутствующиеТовары КАК ЕстьОтсутствующиеТовары,
	|	Товары.Период КАК Период,
	|	Товары.Склад КАК Склад
	|ИЗ
	|	Товары КАК Товары
	|//ГДЕ
	|//	НЕ Товары.ЕстьОтсутствующиеТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Организация,
	|	Товары.НомерГТД,
	|	Товары.ЕстьОтсутствующиеТовары,
	|	Товары.Период,
	|	Товары.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация
	|ИТОГИ ПО
	|	Склад,
	|	Период,
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("ОрганизацияОтправитель", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРаспределения.Колонки.Добавить("ОрганизацияПолучатель", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРаспределения.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРаспределения.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРаспределения.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаРаспределения.Колонки.Добавить("НомерГТД", Новый ОписаниеТипов("СправочникСсылка.НомераГТД"));           
	ТаблицаРаспределения.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаРаспределения.Колонки.Добавить("ДатаОтгрузки", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаРаспределения.Колонки.Добавить("ДатаПоступления", Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	
	Попытка
		НачатьТранзакцию();
		
		ОперативнаяКорректировка = Документы.КорректировкаРегистров.СоздатьДокумент();
		ОперативнаяКорректировка.Дата = Период.ДатаНачала;
		ОперативнаяКорректировка.Записать(РежимЗаписиДокумента.Запись);
		ОперативныеТоварыОрганизации = ОперативнаяКорректировка.Движения.ТоварыОрганизаций;
		
		ВыборкаСклад = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
		Пока ВыборкаСклад.Следующий() Цикл
			
			ВыборкаПериод = ВыборкаСклад.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");//Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период");
			Пока ВыборкаПериод.Следующий() Цикл
				
				ВыборкаОрганизация = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
				Пока ВыборкаОрганизация.Следующий() Цикл
					
					ПараметрыПоиска		= Новый Структура("Получатель", ВыборкаОрганизация.Организация);
					СхемыОрганизации	= Схема.НайтиСтроки(ПараметрыПоиска);
					Если СхемыОрганизации.Количество() = 0 Тогда
						Сообщить("Не определена схема для организации: " + Строка(ВыборкаОрганизация.Организация));
						Продолжить;
					КонецЕсли;
					
					Выборка = ВыборкаОрганизация.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						ОбработанноеКоличество		= 0;
						ОбрабатываемоеКоличество	= Выборка.КоличествоКОформлению;
						АналитикаУчетаНоменклатуры	= ПолучитьАналитикуУчетаНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Склад);				
						Для Каждого СхемаОрганизации Из СхемыОрганизации Цикл
							
							ВидЗапасов			= ПолучитьВидЗапасов(СхемаОрганизации.ОрганизацияДонор);
							//ПараметрыВыбора		= Новый Структура("АналитикаУчетаНоменклатуры, Организация, НомерГТД, ВидЗапасов", АналитикаУчетаНоменклатуры, СхемаОрганизации.ОрганизацияДонор, Выборка.НомерГТД, ВидЗапасов);
							ПараметрыВыбора		= Новый Структура("АналитикаУчетаНоменклатуры, Организация, ВидЗапасов", АналитикаУчетаНоменклатуры, СхемаОрганизации.ОрганизацияДонор, ВидЗапасов);
							ТоварыОрганизаций	= РегистрыНакопления.ТоварыОрганизаций.Остатки(Новый Граница(КонецДня(Выборка.Период), ВидГраницы.Включая), ПараметрыВыбора);
							МинимальныйОстаток	= МинимальныйОстатокЗаПериод(ПараметрыВыбора, КонецДня(Выборка.Период), КонецМесяца(Выборка.Период));
							Если ТоварыОрганизаций.Количество() = 0 Или МинимальныйОстаток = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							МинимальныйОстаток	= ?(МинимальныйОстаток > 0, МинимальныйОстаток, 0);
							Остатки					= ТоварыОрганизаций.Итог("Количество");
							Остатки					= ?(Остатки > 0, Остатки, 0);
							Остатки					= Мин(Остатки, МинимальныйОстаток);
							
							Если Остатки = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							НовСтрока = ТаблицаРаспределения.Добавить();
							НовСтрока.ОрганизацияОтправитель	= СхемаОрганизации.ОрганизацияДонор;
							НовСтрока.ОрганизацияПолучатель     = ВыборкаОрганизация.Организация;
							НовСтрока.Номенклатура				= Выборка.Номенклатура;
							НовСтрока.Характеристика			= Выборка.Характеристика;
							НовСтрока.Склад						= Выборка.Склад;
							НовСтрока.Количество				= Мин(ОбрабатываемоеКоличество, Остатки);
							НовСтрока.НомерГТД					= Выборка.НомерГТД;
							НовСтрока.ДатаОтгрузки				= ВыборкаПериод.Период;
							НовСтрока.ДатаПоступления			= ПолучитьДатуПоступления(СхемаОрганизации.ОрганизацияДонор, АналитикаУчетаНоменклатуры, ВидЗапасов, НачалоМесяца(Выборка.Период), КонецДня(Выборка.Период), НовСтрока.Количество);
							
							НовЗапись = ОперативныеТоварыОрганизации.Добавить();
							НовЗапись.ВидДвижения					= ВидДвиженияНакопления.Расход;
							НовЗапись.Активность					= Истина;
							НовЗапись.Период						= НовСтрока.ДатаПоступления;
							НовЗапись.Организация					= СхемаОрганизации.ОрганизацияДонор;
							НовЗапись.ВидЗапасов					= ВидЗапасов;
							НовЗапись.НомерГТД						= Выборка.НомерГТД;
							НовЗапись.АналитикаУчетаНоменклатуры	= АналитикаУчетаНоменклатуры;
							НовЗапись.Количество                    = Мин(ОбрабатываемоеКоличество, Остатки);
							
							ОперативныеТоварыОрганизации.Записать();
							
							ОбработанноеКоличество		= НовСтрока.Количество;
							ОбрабатываемоеКоличество	= ОбрабатываемоеКоличество - НовСтрока.Количество;
							Если ОбрабатываемоеКоличество <= 0 Тогда
								Прервать;
							КонецЕсли;
							
						КонецЦикла;		
					КонецЦикла;		
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если ТаблицаРаспределения.Количество() > 0 Тогда
			СформироватьДокументыПередач(ТаблицаРаспределения);	
		КонецЕсли;
		
		ОперативныеТоварыОрганизации.Очистить();
		ОперативныеТоварыОрганизации.Записать();
		
		ОперативнаяКорректировка.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		ЗаписьЖурналаРегистрации("ПередачиТоваровМеждуОрганизациями", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуПоступления(ОрганизацияЗапроса, АналитикаУчетаНоменклатуры, ВидЗапасов, ДатаНачала, ДатаОкончания, ЗапрашивоемоеКоличество)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыОрганизацийОстаткиИОбороты.Период КАК Период,
	|	ТоварыОрганизацийОстаткиИОбороты.КоличествоНачальныйОстаток КАК КоличествоНачальныйОстаток,
	|	ТоварыОрганизацийОстаткиИОбороты.КоличествоПриход КАК КоличествоПриход,
	|	ТоварыОрганизацийОстаткиИОбороты.КоличествоРасход КАК КоличествоРасход,
	|	ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток КАК КоличествоКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			День,
	|			,
	|			АналитикаУчетаНоменклатуры = &АналитикаУчетаНоменклатуры
	|				И ВидЗапасов = &ВидЗапасов
	|				И Организация = &Организация) КАК ТоварыОрганизацийОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	
	Запрос.УстановитьПараметр("АналитикаУчетаНоменклатуры", АналитикаУчетаНоменклатуры);
	Запрос.УстановитьПараметр("ВидЗапасов", ВидЗапасов);
	Запрос.УстановитьПараметр("Организация", ОрганизацияЗапроса);
	Запрос.УстановитьПараметр("НачПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.КоличествоНачальныйОстаток > ЗапрашивоемоеКоличество Тогда
			Возврат НачалоДня(Выборка.Период);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат НачалоДня(ДатаОкончания);
КонецФункции	

&НаСервере
Функция МинимальныйОстатокЗаПериод(ПараметрыВыбора, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(ТоварыОрганизацийОстаткиИОбороты.КоличествоКонечныйОстаток, 0)) КАК Остаток
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			День,
	|			,
	|			АналитикаУчетаНоменклатуры = &АналитикаУчетаНоменклатуры
	|				И ВидЗапасов = &ВидЗапасов
	|				//И НомерГТД = &НомерГТД
	|				И Организация = &Организация) КАК ТоварыОрганизацийОстаткиИОбороты");
	
	Запрос.УстановитьПараметр("НачПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", ДатаОкончания);
	Запрос.УстановитьПараметр("АналитикаУчетаНоменклатуры", ПараметрыВыбора.АналитикаУчетаНоменклатуры);
	Запрос.УстановитьПараметр("ВидЗапасов", ПараметрыВыбора.ВидЗапасов);
	//Запрос.УстановитьПараметр("НомерГТД", ПараметрыВыбора.НомерГТД);
	Запрос.УстановитьПараметр("Организация", ПараметрыВыбора.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат ?(Выборка.Остаток = Null, 0, Выборка.Остаток);
	КонецЕсли;
	
	Возврат 0;
КонецФункции	

&НаСервере
Процедура СформироватьДокументыПередач(Таблица)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Таблица.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	Таблица.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Таблица.ДатаПоступления КАК ДатаПоступления,
	|	Таблица.Количество КАК Количество,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.НомерГТД КАК НомерГТД,
	|	Таблица.Склад КАК Склад
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	Таблица.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Таблица.ДатаПоступления КАК ДатаПоступления,
	|	Таблица.Количество КАК Количество,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.НомерГТД КАК НомерГТД,
	|	Таблица.Склад КАК Склад
	|ИЗ
	|	Таблица КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияОтправитель,
	|	ДатаПоступления
	|ИТОГИ ПО
	|	ОрганизацияОтправитель,
	|	ОрганизацияПолучатель,
	|	ДатаПоступления,
	|	Склад
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОрганизацияОтправитель");
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		ВыборкаОрганизацияПолучатель = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОрганизацияПолучатель");
		Пока ВыборкаОрганизацияПолучатель.Следующий() Цикл
			
			ВыборкаДатаПоступления = ВыборкаОрганизацияПолучатель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДатаПоступления");
			Пока ВыборкаДатаПоступления.Следующий() Цикл
				
				ВыборкаСклад = ВыборкаДатаПоступления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
				Пока ВыборкаСклад.Следующий() Цикл
					
					ПараметрыПоиска = Новый Структура("Получатель, ОрганизацияДонор", ВыборкаСклад.ОрганизацияПолучатель, ВыборкаСклад.ОрганизацияОтправитель);
					РезультатПоиска	= Схема.НайтиСтроки(ПараметрыПоиска);
					Если РезультатПоиска.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Ин = 0;
					ОрганизацияДокумента = ВыборкаСклад.ОрганизацияОтправитель;
					Для Каждого Колено Из РезультатПоиска[0].Колена Цикл
						
						СформироватьПередачуМеждуОрганизациями(ВыборкаДатаПоступления.ДатаПоступления + Ин, Колено.ВидЦены, ВыборкаСклад, ОрганизацияДокумента, Колено.Организация); 
						
						ОрганизацияДокумента = Колено.Организация;
						Ин = Ин + 1;
					КонецЦикла;
					
					СформироватьПередачуМеждуОрганизациями(ВыборкаДатаПоступления.ДатаПоступления + Ин, РезультатПоиска[0].ВидЦены, ВыборкаСклад, ОрганизацияДокумента, ВыборкаСклад.ОрганизацияПолучатель);					
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;						
	
КонецПроцедуры

&НаСервере
Функция СформироватьПередачуМеждуОрганизациями(ДатаДокумента, ВидЦеныУстановка, ВыборкаСклад, Организация, ОрганизацияПолучатель, Посредник = Неопределено)
	
	ПередачаТоваровМеждуОрганизациями = Документы.ПередачаТоваровМеждуОрганизациями.СоздатьДокумент();
	ПередачаТоваровМеждуОрганизациями.Дата						= ДатаДокумента;
	ПередачаТоваровМеждуОрганизациями.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
	ПередачаТоваровМеждуОрганизациями.Организация				= Организация;
	ПередачаТоваровМеждуОрганизациями.ОрганизацияПолучатель		= ОрганизацияПолучатель;
	ПередачаТоваровМеждуОрганизациями.ЦенаВключаетНДС			= Истина;
	ПередачаТоваровМеждуОрганизациями.ВидЦены					= ВидЦеныУстановка;
	ПередачаТоваровМеждуОрганизациями.Валюта					= Константы.ВалютаРегламентированногоУчета.Получить();
	ПередачаТоваровМеждуОрганизациями.ВалютаВзаиморасчетов		= ПередачаТоваровМеждуОрганизациями.Валюта;
	ПередачаТоваровМеждуОрганизациями.ДатаПлатежа				= КонецМесяца(ДатаДокумента);
	ПередачаТоваровМеждуОрганизациями.НалогообложениеНДС		= ПолуитьНалогооблажение(Организация); //Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	ПередачаТоваровМеждуОрганизациями.Склад						= ВыборкаСклад.Склад;
	ПередачаТоваровМеждуОрганизациями.Комментарий				= "###Сформировано обработкой передачи###";
	//ПередачаТоваровМеждуОрганизациями.ПорядокОплаты				= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ПередачаТоваровМеждуОрганизациями.ВидыЗапасовУказаныВручную	= Истина;
	
	Если ЗначениеЗаполнено(Посредник) Тогда
		ПередачаТоваровМеждуОрганизациями.РасчетыЧерезОтдельногоКонтрагента = Истина;
		ПередачаТоваровМеждуОрганизациями.Партнер		= Посредник.Партнер;
		ПередачаТоваровМеждуОрганизациями.Контрагент	= Посредник;
	КонецЕсли;	
	
	Выборка = ВыборкаСклад.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовСтрока = ПередачаТоваровМеждуОрганизациями.Товары.Добавить();
		НовСтрока.Номенклатура			= Выборка.Номенклатура;
		НовСтрока.Характеристика		= Выборка.Характеристика;
		НовСтрока.Количество			= Выборка.Количество;
		НовСтрока.КоличествоУпаковок	= Выборка.Количество;
		НовСтрока.ВидЦены				= ВидЦеныУстановка;
		НовСтрока.СтавкаНДС				= СтавкаНДС20;
		НовСтрока.НомерГТД				= Выборка.НомерГТД;
	КонецЦикла;	
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ПередачаТоваровМеждуОрганизациями);			
	ПараметрыЗаполнения		= Новый Структура("Дата, Валюта, ВидЦены, ПоляЗаполнения", ПередачаТоваровМеждуОрганизациями.Дата, ПередачаТоваровМеждуОрганизациями.Валюта, ВидЦеныУстановка, "Цена, ВидЦены");
	СтруктураДействий		= Новый Структура("ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС", "КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы);
	
	ЦеныРассчитаны			= ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(ПередачаТоваровМеждуОрганизациями.Товары, ,ПараметрыЗаполнения, СтруктураДействий); 
	
	КэшированныеЗначения	= Неопределено;
	
	ВидЗапасовДокумента		= ПолучитьВидЗапасов(ПередачаТоваровМеждуОрганизациями.Организация);
	ВидЗапасовПолучателя	= ПолучитьВидЗапасов(ПередачаТоваровМеждуОрганизациями.ОрганизацияПолучатель);
	Для Каждого ТекСтрока Из ПередачаТоваровМеждуОрганизациями.Товары Цикл 
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			ТекСтрока.СтавкаНДС = СтавкаНДС20;
		КонецЕсли;
		
		НовСтрока = ПередачаТоваровМеждуОрганизациями.ВидыЗапасов.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.ВидЗапасов					= ВидЗапасовДокумента;
		НовСтрока.ВидЗапасовПолучателя			= ВидЗапасовПолучателя;
		НовСтрока.АналитикаУчетаНоменклатуры	= ПолучитьАналитикуУчетаНоменклатуры(ТекСтрока.Номенклатура, ТекСтрока.Характеристика, ПередачаТоваровМеждуОрганизациями.Склад);
		НовСтрока.ИдентификаторСтроки			= Строка(Новый УникальныйИдентификатор); 
		
		Если ТекСтрока.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.ВидЦены	= Неопределено;
		ТекСтрока.Цена		= 1;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ПередачаТоваровМеждуОрганизациями));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", ПередачаТоваровМеждуОрганизациями.ЦенаВключаетНДС));
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;	
	
	ПередачаТоваровМеждуОрганизациями.Записать(РежимЗаписиДокумента.Проведение);
	
	НовСтрока = Результат.Добавить();
	НовСтрока.ПередачаТоваров		= ПередачаТоваровМеждуОрганизациями.Ссылка;
	НовСтрока.Организация			= ПередачаТоваровМеждуОрганизациями.Организация;
	НовСтрока.ОрганизацияПолучатель	= ПередачаТоваровМеждуОрганизациями.ОрганизацияПолучатель;
	
КонецФункции

&НаСервере
Функция ПолуитьНалогооблажение(ОрганизацияОблажения)
	
	Если Не ЗначениеЗаполнено(ОрганизацияОблажения) Тогда
		Возврат Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;	

	Если ОрганизацияОблажения.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Возврат Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	КонецЕсли;	
	
	Возврат Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
КонецФункции	

&НаСервере
Функция ПолучитьХарактеристику(Номенклатура)
	
	Характеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию("Без хар.", Истина,, Номенклатура);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Возврат Характеристика;
	КонецЕсли;	
	
	ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	ХарактеристикаОбъект.Наименование		= "Без хар.";
	ХарактеристикаОбъект.НаименованиеПолное	= "Без хар.";
	ХарактеристикаОбъект.Владелец			= Номенклатура;
	ХарактеристикаОбъект.ВидНоменклатуры	= Номенклатура.ВидНоменклатуры;
	ХарактеристикаОбъект.Записать();
	
	Возврат ХарактеристикаОбъект.Ссылка;
КонецФункции	

&НаСервере
Функция ПолучитьВидЗапасов(Организация)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Организация = &Организация
	|	И ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	И НЕ ВидыЗапасов.ПометкаУдаления
	|	И НЕ ВидыЗапасов.РеализацияЗапасовДругойОрганизации");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	
	ВызватьИсключение "Не определен вид запасов";
КонецФункции	

&НаСервере
Функция ПолучитьАналитикуУчетаНоменклатуры(Номенклатура, Характеристика, Склад)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	АналитикаУчетаНоменклатуры.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|ГДЕ
	|	АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура
	|	И АналитикаУчетаНоменклатуры.Характеристика = &Характеристика
	|	И АналитикаУчетаНоменклатуры.МестоХранения = &Склад");
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Склад", Склад);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КлючАналитики;
	КонецЕсли;
	
	ВызватьИсключение "Не найдена аналитика учета номенклатуры";
КонецФункции	


&НаКлиенте
Процедура СформироватьСчетаФактуры(Команда)
	
	ТекстВопроса = "Будут сформированы все счета фактуры за указанный период. Продолжить?";
	
	Кнопки	= Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да);
	Кнопки.Добавить(КодВозвратаДиалога.Нет);
	
	Оповещение = Новый ОписаниеОповещения("СформироватьСчетаФактурыОповещение", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСчетаФактурыОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СчетаФактуры.Очистить();
	
	СформироватьДокументыСчетаФактуры();
КонецПроцедуры

&НаСервере
Процедура СформироватьДокументыСчетаФактуры()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПередачаТоваровМеждуОрганизациями.Ссылка КАК Ссылка,
	|	ПередачаТоваровМеждуОрганизациями.Организация КАК Организация,
	|	ПередачаТоваровМеждуОрганизациями.Дата КАК Дата
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|ГДЕ
	|	ПередачаТоваровМеждуОрганизациями.Проведен
	|	И ПередачаТоваровМеждуОрганизациями.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И ПередачаТоваровМеждуОрганизациями.Организация = &Организация");
	
	Запрос.УстановитьПараметр("НачПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		//СчетФактураДокумента				= ПродажиВызовСервера.СчетФактураДокумента(Выборка.Ссылка, Выборка.Организация);
		СчетФактураДокумента				= УчетНДСРФВызовСервера.СчетФактураВыданныйПоОснованию(Выборка.Ссылка, Выборка.Организация);
		
		Если ЗначениеЗаполнено(СчетФактураДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", Выборка.Ссылка);
		ДанныеСчетаФактуры.Вставить("Организация",       Выборка.Организация);
		ДанныеСчетаФактуры.Вставить("Дата", 	         Выборка.Дата);
		ДанныеСчетаФактуры.Вставить("Исправление",       Ложь);
		ДанныеСчетаФактуры.Вставить("Корректировочный",  Ложь);
		
		СчетФактураВыданный = Документы.СчетФактураВыданный.СоздатьДокумент();
		СчетФактураВыданный.Дата	= Выборка.Дата;
		СчетФактураВыданный.Заполнить(ДанныеСчетаФактуры);
		
		СчетФактураВыданный.ДатаВыставления	= Выборка.Дата;
		
		Попытка
			СчетФактураВыданный.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		НовСтрока = СчетаФактуры.Добавить();
		НовСтрока.СчетФактура	= СчетФактураВыданный.Ссылка;
		НовСтрока.Организация	= СчетФактураВыданный.Организация;
		
		//ПараметрыФормы = Новый Структура("Основание, ДокументОснование, ВозвращатьПараметрыПредставления",
		//	ДанныеСчетаФактуры, Форма.Объект.Ссылка, Истина);
		//ОткрытьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, Форма);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция СписаниеТоваровНаСервере()
	
	Корректировка = Документы.КорректировкаРегистров.СоздатьДокумент();
	Корректировка.Дата = ДатаСписания;
	
	НовСтрока = Корректировка.ТаблицаРегистров.Добавить();
	НовСтрока.Имя = "ТоварыОрганизаций";
	
	Корректировка.Записать();
	
	ТоварыОрганизаций = Корректировка.Движения.ТоварыОрганизаций;
	
	Для Каждого ТекСтрока Из ПередачаДляСписания.ВидыЗапасов Цикл
		
		НовСтрока = ТоварыОрганизаций.Добавить();
		НовСтрока.Активность					= Истина;
		НовСтрока.Период						= ДатаСписания;
		НовСтрока.ВидДвижения					= ВидДвиженияНакопления.Расход;
		НовСтрока.Регистратор					= Корректировка.Ссылка;
		НовСтрока.Организация					= ПередачаДляСписания.ОрганизацияПолучатель;
		НовСтрока.ВидЗапасов					= ТекСтрока.ВидЗапасов;
		НовСтрока.НомерГТД						= ТекСтрока.НомерГТД;
		НовСтрока.АналитикаУчетаНоменклатуры	= ТекСтрока.АналитикаУчетаНоменклатуры;
		НовСтрока.Количество					= ТекСтрока.Количество;
		НовСтрока.ХозяйственнаяОперация			= Перечисления.ХозяйственныеОперации.СписаниеТоваров;
	КонецЦикла;
	
	ТоварыОрганизаций.Записать();
	
	Возврат Корректировка.Ссылка;
КонецФункции

&НаКлиенте
Процедура СписаниеТоваров(Команда)
	
	Если Не ЗначениеЗаполнено(ПередачаДляСписания) Тогда
		ПоказатьПредупреждение(, "Не указан документ передачи!");
		Возврат;
	КонецЕсли;	
	
	СсылкаНадокумент = СписаниеТоваровНаСервере();
	
	Если Не ЗначениеЗаполнено(СсылкаНадокумент) Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыОткрытия = Новый Структура("Ключ", СсылкаНадокумент);
	
	ОткрытьФорму("Документ.КорректировкаРегистров.ФормаОбъекта", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеНаОтрицательныеОстатки(Команда)
	
	Данные = ПоступлениеНаОтрицательныеОстаткиНаСервере();
	
	Для Каждого ДокументОтбор Из Данные Цикл
		
		ПараметрыФормы = Новый Структура;
		ФормаПоступления = ПолучитьФорму("Документ.ПриобретениеТоваровУслуг.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Новый УникальныйИдентификатор);
		ФормаПоступления.Объект.Организация 			= ПоступлениеОрганизация;
		ФормаПоступления.Объект.Партнер					= ПоступлениеПартнер;
		ФормаПоступления.Объект.Контрагент				= ПоступлениеКонтрагент;
		ФормаПоступления.Объект.Договор					= ПоступлениеДоговор;
		ФормаПоступления.Объект.Валюта					= ДокументОтбор.Валюта;
		ФормаПоступления.Объект.ВалютаВзаиморасчетов	= ДокументОтбор.Валюта;
		ФормаПоступления.Объект.Склад					= ПоступлениеСклад;
		ФормаПоступления.Объект.ХозяйственнаяОперация	= ДокументОтбор.ХозяйственнаяОперация;
		ФормаПоступления.Объект.НалогообложениеНДС		= ДокументОтбор.НалогообложениеНДС;
		ФормаПоступления.Объект.ЗакупкаПодДеятельность  = ДокументОтбор.НалогообложениеНДС;
		ФормаПоступления.Объект.ВариантПриемкиТоваров	= ДокументОтбор.ВариантПриемкиТоваров;
		ФормаПоступления.Объект.Дата					= Период.ДатаНачала;
		ФормаПоступления.Объект.Склад					= ДокументОтбор.Склад;
		//ФормаПоступления.Объект.Курс					= 1;
		//ФормаПоступления.Объект.Кратность				= 1;
		//ФормаПоступления.Объект.ПорядокОплаты			= ДокументОтбор.ПорядокОплаты;
		ФормаПоступления.Объект.ЦенаВключаетНДС			= ДокументОтбор.ЦенаВключаетНДС;
		ФормаПоступления.Объект.ПорядокРасчетов			= ДокументОтбор.ПорядокРасчетов;
		ФормаПоступления.Объект.Комментарий				= "###Сформировано обработкой передачи###";
		
		ФормаПоступления.Модифицированность				= Истина;
		ФормаПоступления.ИспользоватьГрафикиОплаты		= Истина;
		
		КэшированныеЗначения = Неопределено;
		
		Для Каждого ТекСтрока Из ДокументОтбор.Товары Цикл
			
			ТекущаяСтрока = ФормаПоступления.Объект.Товары.Добавить();
			ТекущаяСтрока.Номенклатура					= ТекСтрока.Номенклатура;
			ТекущаяСтрока.НомерГТД						= ТекСтрока.НомерГТД;
			ТекущаяСтрока.Количество					= ТекСтрока.Количество;
			ТекущаяСтрока.КоличествоУпаковок			= ТекСтрока.Количество;
			ТекущаяСтрока.Склад							= ТекСтрока.Склад;
			ТекущаяСтрока.СтавкаНДС						= ТекСтрока.СтавкаНДС;
			ТекущаяСтрока.Цена							= ТекСтрока.Цена;
			ТекущаяСтрока.Характеристика				= ТекСтрока.Характеристика;
			ТекущаяСтрока.ТипНоменклатуры      			= ТекСтрока.ТипНоменклатуры;
			ТекущаяСтрока.ХарактеристикиИспользуются	= ТекСтрока.ХарактеристикиИспользуются;
			ТекущаяСтрока.ВедетсяУчетПоГТД				= ТекСтрока.ВедетсяУчетПоГТД;
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ФормаПоступления.Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", Новый Структура("БезВозвратнойТары","Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки"));
			СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
			ФормаПоступления.Объект.ПоступлениеПоЗаказам, ФормаПоступления.Объект.ТребуетсяЗалогЗаТару));
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			//ОбновитьОтклоненияОтЗаказаВСтроке(ТекущаяСтрока, ФормаПоступления.Объект.ПоступлениеПоЗаказам, ФормаПоступления.Объект.ТребуетсяЗалогЗаТару);
			
			//РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);		
		КонецЦикла;
		
		ФормаПоступления.Объект.СуммаДокумента = ФормаПоступления.Объект.Товары.Итог("СуммаСНДС");
		
		ФормаПоступления.СуммаВсего = ФормаПоступления.Объект.СуммаДокумента;
		ФормаПоступления.СуммаНДС	= ФормаПоступления.Объект.Товары.Итог("СуммаНДС");
		
		НовСтрока = ФормаПоступления.Объект.ЭтапыГрафикаОплаты.Добавить();
		НовСтрока.ДатаПлатежа			= ТекущаяДата();
		НовСтрока.Сдвиг					= 1;
		НовСтрока.ПроцентПлатежа		= 100;
		НовСтрока.СуммаПлатежа			= ФормаПоступления.Объект.СуммаДокумента;
		НовСтрока.СуммаВзаиморасчетов	= НовСтрока.СуммаПлатежа;
		НовСтрока.ВариантОплаты			= ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыПоставщику.КредитПослеПоступления");
		
		ФормаПоступления.Открыть();		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Функция ПоступлениеНаОтрицательныеОстаткиНаСервере()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Товары.Организация КАК Организация,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.КоличествоКОформлению КАК Количество,
	|	Товары.НомерГТД КАК НомерГТД,
	|	Товары.Склад КАК Склад
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СУММА(Товары.Количество) КАК Количество,
	|	Товары.НомерГТД КАК НомерГТД,
	|	СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)) КАК Цена,
	|	Товары.Склад КАК Склад,
	|	Каталог.СтавкаНДС КАК СтавкаНДС,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	Каталог.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	Каталог.ВестиУчетПоГТД КАК ВедетсяУчетПоГТД
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&КонПериода, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО Товары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО Товары.Номенклатура = ХарактеристикиНоменклатуры.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Каталог
	|		ПО Товары.Номенклатура = Каталог.Ссылка
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Товары.Организация = &Организация
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Товары.Склад = &Склад
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.НомерГТД,
	|	Товары.Склад,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	Каталог.СтавкаНДС,
	|	Каталог.ТипНоменклатуры,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	Каталог.ВестиУчетПоГТД
	|ИТОГИ ПО
	|	Склад");
	
	Запрос.УстановитьПараметр("Организация", ПоступлениеОрганизация);
	Запрос.УстановитьПараметр("КонПериода", Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидЦены", ПоступлениеВидЦены);
	Запрос.УстановитьПараметр("Склад", ПоступлениеСклад);
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	РезультатДанные = Новый Массив;
	
	ВыборкаСклад = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Склад");
	Пока ВыборкаСклад.Следующий() Цикл
		
		УчетНДСКэшированныеЗначенияПараметров = Неопределено;
		
		ДокументОтбор = Новый Структура;
		ДокументОтбор.Вставить("Товары", Новый Массив);
		ДокументОтбор.Вставить("ЦенаВключаетНДС", ?(ЗначениеЗаполнено(ПоступлениеВидЦены), ПоступлениеВидЦены.ЦенаВключаетНДС, Ложь));
		ДокументОтбор.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет);
		ДокументОтбор.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
		//ДокументОтбор.Вставить("ПорядокОплаты", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоступлениеДоговор, "ПорядокОплаты"));
		ДокументОтбор.Вставить("НалогообложениеНДС", Неопределено);
		ДокументОтбор.Вставить("ВариантПриемкиТоваров", Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным);
		ДокументОтбор.Вставить("Склад", ВыборкаСклад.Склад);
		//ДокументОтбор.Вставить("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
		ДокументОтбор.Вставить("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоНакладным); 
		
		ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки();
		ПараметрыЗаполнения.Договор				= ПоступлениеДоговор;
		ПараметрыЗаполнения.Контрагент			= ПоступлениеКонтрагент;
		ПараметрыЗаполнения.ПриобретениеТоваров	= Истина;
		
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(ДокументОтбор.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
		
		Выборка = ВыборкаСклад.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НовСтрока = Новый Структура("Номенклатура, Характеристика, НомерГТД, Склад, СтавкаНДС, ТипНоменклатуры, ХарактеристикиИспользуются, ВедетсяУчетПоГТД, Количество, Цена");
			ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
			
			ДокументОтбор.Товары.Добавить(НовСтрока);
		КонецЦикла;
		
		Если ПоступлениеЗаполнятьГТД Тогда
			ЗаполнитьГТД(ДокументОтбор.Товары);
		КонецЕсли;	
		
		РезультатДанные.Добавить(ДокументОтбор);
	КонецЦикла;	
	
	Возврат РезультатДанные;
КонецФункции

Процедура ЗаполнитьГТД(ТоварыДокумента)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД,
	|	ТоварыОрганизаций.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	НЕ ТоварыОрганизаций.Активность
	|	И ТоварыОрганизаций.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Номенклатура");
	
	ТоварыОрганизаций = Запрос.Выполнить().Выгрузить();
	ТоварыОрганизаций.Индексы.Добавить("Организация");
	ТоварыОрганизаций.Индексы.Добавить("Номенклатура");
	
	Для Каждого ТекСтрока Из ТоварыДокумента Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.НомерГТД) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПоиска = Новый Структура("Организация, Номенклатура", ПоступлениеОрганизация, ТекСтрока.Номенклатура);
		РезультатПоиска = ТоварыОрганизаций.НайтиСтроки(ПараметрыПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			ТекСтрока.НомерГТД = РезультатПоиска[0].НомерГТД;
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска = ТоварыОрганизаций.Найти(ТекСтрока.Номенклатура, "Номенклатура");
		Если РезультатПоиска <> Неопределено Тогда
			ТекСтрока.НомерГТД = РезультатПоиска.НомерГТД;
		КонецЕсли;	
		
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизаций.Организация КАК Организация,
	|	ТоварыОрганизаций.НомерГТД КАК НомерГТД
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|ГДЕ
	|	ТоварыОрганизаций.Активность
	|	И ТоварыОрганизаций.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)");
	
	ТоварыОрганизаций = Запрос.Выполнить().Выгрузить();
	ТоварыОрганизаций.Индексы.Добавить("Организация");
	ТоварыОрганизаций.Индексы.Добавить("Номенклатура");
	
	Для Каждого ТекСтрока Из ТоварыДокумента Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.НомерГТД) Тогда
			Продолжить;
		КонецЕсли;	
		
		ПараметрыПоиска = Новый Структура("Организация, Номенклатура", ПоступлениеОрганизация, ТекСтрока.Номенклатура);
		РезультатПоиска = ТоварыОрганизаций.НайтиСтроки(ПараметрыПоиска);
		
		Если РезультатПоиска.Количество() > 0 Тогда
			ТекСтрока.НомерГТД = РезультатПоиска[0].НомерГТД;
			Продолжить;
		КонецЕсли;	
		
		РезультатПоиска = ТоварыОрганизаций.Найти(ТекСтрока.Номенклатура, "Номенклатура");
		Если РезультатПоиска <> Неопределено Тогда
			ТекСтрока.НомерГТД = РезультатПоиска.НомерГТД;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ПроведениеПровестиНаСервере()
	
	СхемаКомпановки	= Элементы.ПроведениеПоступления.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки		= Элементы.ПроведениеПоступления.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпановки,Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	РезультатВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого Документ Из РезультатВывода Цикл
		
		ПередачаТоваровМеждуОрганизациями = Документ.Ссылка.ПолучитьОбъект();
		Попытка
			ПередачаТоваровМеждуОрганизациями.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведениеПровести(Команда)
	ПроведениеПровестиНаСервере();
	
	ПоказатьПредупреждение(, "Выполнено");
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеИзменитьЦену(Команда)
	
	Если Не ЗначениеЗаполнено(ИзменениеИзменитьВидЦен) Тогда
		ПоказатьПредупреждение(, "Не указа вид цен");
		Возврат;
	КонецЕсли;	
	
	ИзменениеИзменитьЦенуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИзменениеИзменитьЦенуНаСервере()
	
	СхемаКомпановки	= Элементы.ИзменениеЦенПередачи.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки		= Элементы.ИзменениеЦенПередачи.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпановки,Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	РезультатВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого Документ Из РезультатВывода Цикл
		
		ПередачаТоваровМеждуОрганизациями = Документ.Ссылка.ПолучитьОбъект();
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ПередачаТоваровМеждуОрганизациями);			
		ПараметрыЗаполнения		= Новый Структура("Дата, Валюта, ВидЦены, ПоляЗаполнения", ПередачаТоваровМеждуОрганизациями.Дата, ПередачаТоваровМеждуОрганизациями.Валюта, ИзменениеИзменитьВидЦен, "Цена, ВидЦены");
		СтруктураДействий		= Новый Структура("ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС", "КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы);
		ЦеныРассчитаны			= ПродажиСервер.ЗаполнитьЦены(ПередачаТоваровМеждуОрганизациями.Товары,,ПараметрыЗаполнения, СтруктураДействий);
		
		Если ПередачаТоваровМеждуОрганизациями.Проведен Тогда
			Попытка
				ПередачаТоваровМеждуОрганизациями.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ПередачаТоваровМеждуОрганизациями.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
		Иначе
			ПередачаТоваровМеждуОрганизациями.Записать();
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменениеПровестиНаСервере()
	
	СхемаКомпановки	= Элементы.ИзменениеЦенПередачи.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки		= Элементы.ИзменениеЦенПередачи.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпановки,Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	РезультатВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого Документ Из РезультатВывода Цикл
		
		ПередачаТоваровМеждуОрганизациями = Документ.Ссылка.ПолучитьОбъект();
		Попытка
			ПередачаТоваровМеждуОрганизациями.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПровести(Команда)
	ИзменениеПровестиНаСервере();
КонецПроцедуры

&НаСервере
Процедура СборкиТоваров_ЗаполнитьОрганизациюНаСервере() 	
	
	Для Каждого ТексТрока Из Элементы.СборкиТоваров.ВыделенныеСтроки Цикл	
		ОпределитьОрганизациюСборкаТоваров(ТексТрока);		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОпределитьОрганизациюСборкаТоваров(СборкаТоваров)
	
	ПриоритетыОрганизаций = Новый ТаблицаЗначений;
	ПриоритетыОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПриоритетыОрганизаций.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для Ин = 1 По СборкиТоваровПриоритет.Количество() Цикл
		
		Если Не ЗначениеЗаполнено(СборкиТоваровПриоритет[Ин-1].Значение) Тогда
			Продолжить;
		КонецЕсли;	
		
		НовСтрока = ПриоритетыОрганизаций.Добавить();
		НовСтрока.Организация	= СборкиТоваровПриоритет[Ин-1].Значение;
		НовСтрока.Приоритет		= Ин;	
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СборкаТоваров.Номенклатура КАК Номенклатура,
	|	СборкаТоваров.Характеристика КАК Характеристика,
	|	СборкаТоваров.Количество КАК Количество,
	|	СборкаТоваров.Склад КАК Склад
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.СборкаТоваров КАК СборкаТоваров
	|ГДЕ
	|	СборкаТоваров.Ссылка = &СборкаТоваров
	|	И СборкаТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазборкаТоваров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СборкаТоваровТовары.Номенклатура,
	|	СборкаТоваровТовары.Характеристика,
	|	СборкаТоваровТовары.Количество,
	|	СборкаТоваровТовары.Ссылка.Склад
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК СборкаТоваровТовары
	|ГДЕ
	|	СборкаТоваровТовары.Ссылка = &СборкаТоваров
	|	И СборкаТоваровТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СборкаТоваров)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Склад КАК Склад,
	|	ЕСТЬNULL(АналитикаУчетаНоменклатуры.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)) КАК КлючАналитики
	|ПОМЕСТИТЬ ТоварыСАналитикой
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО Товары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|			И Товары.Характеристика = АналитикаУчетаНоменклатуры.Характеристика
	|			И Товары.Склад = АналитикаУчетаНоменклатуры.МестоХранения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики,
	|	Склад,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	Организации.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	&Организации КАК Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСАналитикой.Номенклатура КАК Номенклатура,
	|	ТоварыСАналитикой.Характеристика КАК Характеристика,
	|	ТоварыСАналитикой.Количество КАК Количество,
	|	ТоварыСАналитикой.Склад КАК Склад,
	|	ТоварыСАналитикой.КлючАналитики КАК КлючАналитики,
	|	ЕСТЬNULL(Организации.Приоритет, -1) КАК Приоритет,
	|	ТоварыОрганизацийОстатки.Организация КАК Организация
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ТоварыСАналитикой КАК ТоварыСАналитикой
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени, ) КАК ТоварыОрганизацийОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Организации КАК Организации
	|			ПО ТоварыОрганизацийОстатки.Организация = Организации.Организация
	|		ПО ТоварыСАналитикой.Количество <= ТоварыОрганизацийОстатки.КоличествоОстаток
	|			И ТоварыСАналитикой.КлючАналитики = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Организация,
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.КлючАналитики КАК КлючАналитики,
	|	МИНИМУМ(Данные.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ДанныеМаксимум
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМаксимум.КлючАналитики КАК КлючАналитики,
	|	Данные.Номенклатура КАК Номенклатура,
	|	Данные.Характеристика КАК Характеристика,
	|	Данные.Количество КАК Количество,
	|	Данные.Склад КАК Склад,
	|	ДанныеМаксимум.Приоритет КАК Приоритет,
	|	Данные.Организация КАК Организация
	|ИЗ
	|	ДанныеМаксимум КАК ДанныеМаксимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Данные КАК Данные
	|		ПО ДанныеМаксимум.КлючАналитики = Данные.КлючАналитики
	|			И ДанныеМаксимум.Приоритет = Данные.Приоритет
	|ГДЕ
	|	Данные.Приоритет >= 0");
	
	Запрос.УстановитьПараметр("СборкаТоваров", СборкаТоваров);
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(СборкаТоваров.Дата, СборкаТоваров));
	Запрос.УстановитьПараметр("Организации", ПриоритетыОрганизаций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 0 Тогда 
		Сообщить("Организации не найдены");
		Возврат;
	КонецЕсли;
	
	Коэффициент = 1/Выборка.Количество(); 
	
	НачатьТранзакцию(); 
	
	СкладОтправитель = СборкаТоваров.Склад.ПолучитьОбъект();
	
	СкладОтправитель.ОбменДанными.Загрузка				= Истина;
	СкладОтправитель.КонтролироватьОперативныеОстатки	= Ложь;
	СкладОтправитель.КонтролироватьСвободныеОстатки		= Ложь;
	//СкладОтправитель.КонтролироватьОбеспечение		= Ложь;
	СкладОтправитель.Записать();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(Выборка.Организация) Тогда
				Продолжить;
			КонецЕсли;	
			
			СборкаТоваровНовая = СборкаТоваров.ПолучитьОбъект();
			СборкаТоваровНовая.Организация = Выборка.Организация;
			
			Для Каждого ТекСтрокаЗапас Из СборкаТоваровНовая.ВидыЗапасовСписание Цикл
				ТекСтрокаЗапас.ВидЗапасов = ПолучитьВидЗапасов(СборкаТоваровНовая.Организация);
			КонецЦикла;
			
			Для Каждого ТекСтрокаЗапас Из СборкаТоваровНовая.ВидыЗапасовОприходование Цикл
				ТекСтрокаЗапас.ВидЗапасов = ПолучитьВидЗапасов(СборкаТоваровНовая.Организация);
			КонецЦикла;
			
			СборкаТоваровНовая.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
			СборкаТоваровНовая.Записать(РежимЗаписиДокумента.Проведение);
			Прервать;
		КонецЦикла;   
		
		СкладОтправитель.КонтролироватьОперативныеОстатки	= Истина;
		СкладОтправитель.КонтролироватьСвободныеОстатки		= Истина;
		//СкладОтправитель.КонтролироватьОбеспечение		= Истина;
		СкладОтправитель.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Процедура ОпределитьОрганизациюПеремещение(ДокументПеремещениеТоваров) 
	
	Если ПеремещениеПриоритет.Количество() = 0 Тогда
		Сообщить("Не определены приоритеты перемещения по организациям");
		Возврат;
	КонецЕсли;
	
	ПриоритетыОрганизаций = Новый ТаблицаЗначений;
	ПриоритетыОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПриоритетыОрганизаций.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	
	Для Ин = 1 По ПеремещениеПриоритет.Количество() Цикл
		
		НовСтрока = ПриоритетыОрганизаций.Добавить();
		НовСтрока.Организация	= ПеремещениеПриоритет[Ин-1].Значение;
		НовСтрока.Приоритет		= Ин;	
	КонецЦикла;	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПеремещениеТоваров.Номенклатура КАК Номенклатура,
	|	ПеремещениеТоваров.Характеристика КАК Характеристика,
	|	ПеремещениеТоваров.Количество КАК Количество,
	|	ПеремещениеТоваров.Ссылка.СкладОтправитель КАК Склад,
	|	ПеремещениеТоваров.Ссылка.Организация КАК Организация,
	|	ПеремещениеТоваров.НомерСтроки - 1 КАК Индекс,
	|	ПеремещениеТоваров.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка = &ПеремещениеТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПеремещениеТовары.Номенклатура,
	|	ЗаказНаПеремещениеТовары.Характеристика,
	|	ЗаказНаПеремещениеТовары.Количество,
	|	ЗаказНаПеремещениеТовары.Ссылка.СкладОтправитель,
	|	ЗаказНаПеремещениеТовары.Ссылка.Организация,
	|	ЗаказНаПеремещениеТовары.НомерСтроки - 1,
	|	ЗаказНаПеремещениеТовары.КодСтроки
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ЗаказНаПеремещениеТовары
	|ГДЕ
	|	ЗаказНаПеремещениеТовары.Ссылка = &ПеремещениеТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Количество КАК Количество,
	|	Товары.Склад КАК Склад,
	|	ЕСТЬNULL(АналитикаУчетаНоменклатуры.КлючАналитики, ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)) КАК КлючАналитики,
	|	Товары.Организация КАК Организация,
	|	Товары.Индекс КАК Индекс,
	|	Товары.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ТоварыСАналитикой
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|		ПО Товары.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|			И Товары.Характеристика = АналитикаУчетаНоменклатуры.Характеристика
	|			И Товары.Склад = АналитикаУчетаНоменклатуры.МестоХранения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики,
	|	Склад,
	|	Номенклатура,
	|	Характеристика,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Организация КАК Организация,
	|	Организации.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	&Организации КАК Организации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСАналитикой.Номенклатура КАК Номенклатура,
	|	ТоварыСАналитикой.Характеристика КАК Характеристика,
	|	ТоварыСАналитикой.Количество КАК Количество,
	|	ТоварыСАналитикой.Склад КАК Склад,
	|	ТоварыСАналитикой.КлючАналитики КАК КлючАналитики,
	|	ЕСТЬNULL(Организации.Приоритет, 99) КАК Приоритет,
	|	ЕСТЬNULL(ТоварыОрганизацийОстатки.Организация, &ОрганизацияПоУмолчанию) КАК Организация,
	|	ТоварыСАналитикой.Индекс КАК Индекс,
	|	ТоварыСАналитикой.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	ТоварыСАналитикой КАК ТоварыСАналитикой
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени, ) КАК ТоварыОрганизацийОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ Организации КАК Организации
	|			ПО ТоварыОрганизацийОстатки.Организация = Организации.Организация
	|		ПО ТоварыСАналитикой.Количество <= ТоварыОрганизацийОстатки.КоличествоОстаток
	|			И ТоварыСАналитикой.КлючАналитики = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Организация,
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.КлючАналитики КАК КлючАналитики,
	|	МИНИМУМ(Данные.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ДанныеМаксимум
	|ИЗ
	|	Данные КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.КлючАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеМаксимум.КлючАналитики КАК КлючАналитики,
	|	Данные.Номенклатура КАК Номенклатура,
	|	Данные.Характеристика КАК Характеристика,
	|	Данные.Количество КАК Количество,
	|	Данные.Количество КАК КоличествоУпаковок,
	|	Данные.Склад КАК Склад,
	|	ДанныеМаксимум.Приоритет КАК Приоритет,
	|	Данные.Организация КАК Организация,
	|	Данные.Индекс КАК Индекс,
	|	Данные.КодСтроки КАК КодСтроки
	|ИЗ
	|	ДанныеМаксимум КАК ДанныеМаксимум
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Данные КАК Данные
	|		ПО ДанныеМаксимум.КлючАналитики = Данные.КлючАналитики
	|			И ДанныеМаксимум.Приоритет = Данные.Приоритет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|ИТОГИ ПО
	|	Организация");
	
	Запрос.УстановитьПараметр("ПеремещениеТоваров", ДокументПеремещениеТоваров);
	Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(ДокументПеремещениеТоваров.Дата, ДокументПеремещениеТоваров));
	Запрос.УстановитьПараметр("Организации", ПриоритетыОрганизаций);
	Запрос.УстановитьПараметр("ОрганизацияПоУмолчанию", ДокументПеремещениеТоваров.Организация); 
	
	НачатьТранзакцию();
	Попытка 
		
		Если ДокументПеремещениеТоваров.ПеремещениеПоЗаказам Тогда
			ДокументПеремещениеТоваровОбъект = ДокументПеремещениеТоваров.ПолучитьОбъект();
			//ДокументПеремещениеТоваровОбъект.УстановитьПометкуУдаления(Истина);
			ДокументПеремещениеТоваровОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;	
		
		СкладОтправитель = ДокументПеремещениеТоваров.СкладОтправитель.ПолучитьОбъект();
		
		СкладОтправитель.ОбменДанными.Загрузка				= Истина;
		СкладОтправитель.КонтролироватьОперативныеОстатки	= Ложь;
		СкладОтправитель.КонтролироватьСвободныеОстатки		= Ложь;
		//СкладОтправитель.КонтролироватьОбеспечение		= Ложь;
		СкладОтправитель.Записать();
		
		ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");		
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			ПеремещениеТоваровНовая = ДокументПеремещениеТоваров.Скопировать();
			ПеремещениеТоваровНовая.Товары.Очистить();
			ПеремещениеТоваровНовая.Дата					= ДокументПеремещениеТоваров.Дата;
			ПеремещениеТоваровНовая.Организация				= ВыборкаОрганизация.Организация;
			ПеремещениеТоваровНовая.ЗаказНаПеремещение		= ДокументПеремещениеТоваров.ЗаказНаПеремещение;
			ПеремещениеТоваровНовая.ПеремещениеПоЗаказам	= ДокументПеремещениеТоваров.ПеремещениеПоЗаказам;
			
			Выборка = ВыборкаОрганизация.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НовСтрока = ПеремещениеТоваровНовая.Товары.Добавить();
				
				НовСтрока.ЗаказНаПеремещение = ДокументПеремещениеТоваров.ЗаказНаПеремещение; 
				
				ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
				
				ТекСтрокаВидЗапасов = ДокументПеремещениеТоваров.ВидыЗапасов.Найти(Выборка.КлючАналитики, "АналитикаУчетаНоменклатуры");
				Если ТекСтрокаВидЗапасов <> Неопределено Тогда 
					НовСтрокаВидЗапасов = ПеремещениеТоваровНовая.ВидыЗапасов.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаВидЗапасов, ТекСтрокаВидЗапасов);
					
					НовСтрокаВидЗапасов.ВидЗапасов				= ПолучитьВидЗапасов(ПеремещениеТоваровНовая.Организация);
					НовСтрокаВидЗапасов.ВидЗапасовПолучателя	= ПолучитьВидЗапасов(ПеремещениеТоваровНовая.Организация);	
				КонецЕсли;
				
			КонецЦикла;	
			
			ПеремещениеТоваровНовая.Комментарий = ПеремещениеТоваровНовая.Комментарий + " " + Строка(ДокументПеремещениеТоваров);
			ПеремещениеТоваровНовая.ВидыЗапасовУказаныВручную	= Истина;
			
			ПеремещениеТоваровНовая.Записать(РежимЗаписиДокумента.Проведение);
			
			Если ПеремещениеТоваровНовая.СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке 
				И Не ПеремещениеТоваровНовая.ПеремещениеПоЗаказам Тогда
				
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл
					
					Ордер = ПолучитьРасходныйОрдерНаТовары(ДокументПеремещениеТоваров, Выборка.Номенклатура);
					Если ЗначениеЗаполнено(Ордер) Тогда
						ОрдерОбъект = Ордер.Ордер.ПолучитьОбъект();
						ОрдерОбъект.ТоварыПоРаспоряжениям[Ордер.Индекс].Распоряжение = ПеремещениеТоваровНовая.Ссылка;
						ОрдерОбъект.Записать(РежимЗаписиДокумента.Проведение); 
					КонецЕсли; 
					
					
					Если ПеремещениеТоваровНовая.СкладПолучатель.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
						
						Ордер = ПолучитьПриходныйОрдерНаТовары(ДокументПеремещениеТоваров, Выборка.Номенклатура);
						Если ЗначениеЗаполнено(Ордер) Тогда
							
							ПриходныйОрдерНаТовары = Ордер.Ордер.Скопировать();
							ПриходныйОрдерНаТовары.Товары.Очистить();
							
							ПриходныйОрдерНаТовары.Дата = ПеремещениеТоваровНовая.Дата;
							ПриходныйОрдерНаТовары.Распоряжение			= ПеремещениеТоваровНовая.Ссылка; 
							ПриходныйОрдерНаТовары.Статус				= Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
							
							ТекСтрокаТовара = Ордер.Ордер.Товары[Ордер.Индекс]; 
							
							НовСтрокаТовара = ПриходныйОрдерНаТовары.Товары.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаТовара, ТекСтрокаТовара);
							
							ПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Проведение);
							
							ПриходныйОрдерНаТовары.Статус	=  Перечисления.СтатусыПриходныхОрдеров.Принят;
							ПриходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Проведение); 
							
						КонецЕсли;	
					КонецЕсли;
					
				КонецЦикла;	
			КонецЕсли;
			
		КонецЦикла;				
		//
		Если Выборка.Количество() > 0 Тогда
			
			Ордера = ПолучитьОрдера(ДокументПеремещениеТоваров); 
			Для Каждого ТекСтрока Из Ордера Цикл
				
				Ордер = ТекСтрока.ПолучитьОбъект();
				Ордер.УстановитьПометкуУдаления(Истина);
				Ордер.Записать(); 
				
				Если Не ДокументПеремещениеТоваров.ПеремещениеПоЗаказам Тогда
					ДокументПеремещениеТоваровОбъект = ДокументПеремещениеТоваров.ПолучитьОбъект();
					//ДокументПеремещениеТоваровОбъект.УстановитьПометкуУдаления(Истина);
					ДокументПеремещениеТоваровОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;	
				
			КонецЦикла;	
		КонецЕсли;
		
		СкладОтправитель.КонтролироватьОперативныеОстатки	= Истина;
		СкладОтправитель.КонтролироватьСвободныеОстатки		= Истина;
		//СкладОтправитель.КонтролироватьОбеспечение		= Истина;
		СкладОтправитель.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьРасходныйОрдерНаТовары(Распоряжение, Номенклатура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.НомерСтроки - 1 КАК Индекс
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
	|	И НЕ РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.ПометкаУдаления
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Номенклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Ордер, Индекс", Выборка.Ссылка, Выборка.Индекс);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Функция ПолучитьПриходныйОрдерНаТовары(Распоряжение, Номенклатура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки - 1 КАК Индекс
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|ГДЕ
	|	НЕ ПриходныйОрдерНаТоварыТовары.Ссылка.ПометкаУдаления
	|	И ПриходныйОрдерНаТоварыТовары.Ссылка.Распоряжение = &Распоряжение
	|	И ПриходныйОрдерНаТоварыТовары.Номенклатура = &Номенклатура");
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Ордер, Индекс", Выборка.Ссылка, Выборка.Индекс);
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции	

Функция ПолучитьОрдера(Перемещение)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка КАК Документ
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары.ТоварыПоРаспоряжениям КАК РасходныйОрдерНаТоварыТоварыПоРаспоряжениям
	|ГДЕ
	|	РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Ссылка.Проведен
	|	И РасходныйОрдерНаТоварыТоварыПоРаспоряжениям.Распоряжение = &Распоряжение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Проведен
	|	И ПриходныйОрдерНаТовары.Распоряжение = &Распоряжение");
	
	Запрос.УстановитьПараметр("Распоряжение", Перемещение);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");	
КонецФункции	

&НаКлиенте
Процедура СборкиТоваров_ЗаполнитьОрганизацию(Команда)
	
	Если СборкиТоваровПриоритет.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не указаны приоритеты");
		Возврат;
	КонецЕсли;
	
	СборкиТоваров_ЗаполнитьОрганизациюНаСервере();
КонецПроцедуры

Функция ПолучитьПеремещенияТоваров(ЗаказыНаПеремещение)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Проведен
	|	И ПеремещениеТоваров.ЗаказНаПеремещение В(&ЗаказНаПеремещение)");
	
	Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказыНаПеремещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;	
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции	

&НаСервере
Процедура ПеремещениеТоваров_ЗаполнитьОрганизациюНаСервере()
	
	Если Элементы.СтраницыПеремещенияТоваров.ТекущаяСтраница = Элементы.СтраницаПеремещениеТоваров2 Тогда
		Для Каждого ТексТрока Из Элементы.ПеремещениеТоваров.ВыделенныеСтроки Цикл	
			ОпределитьОрганизациюПеремещение(ТексТрока);		
		КонецЦикла;
	Иначе
		ВыделенныеСтроки = ПолучитьПеремещенияТоваров(Элементы.ЗаказыНаПеремещениеТоваров.ВыделенныеСтроки);
		Для Каждого ТексТрока Из ВыделенныеСтроки Цикл	
			ОпределитьОрганизациюПеремещение(ТексТрока);		
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТоваров_ЗаполнитьОрганизацию(Команда)
	ПеремещениеТоваров_ЗаполнитьОрганизациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтавкаНДС20 = Справочники.СтавкиНДС.НайтиПоНаименованию("20%",Истина);
КонецПроцедуры
